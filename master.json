{
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "mode": "100644",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "mode": "100644",
      "content": "stream\n======\n\nLearning about streams\n",
      "type": "blob"
    },
    "main.coffee.md": {
      "path": "main.coffee.md",
      "mode": "100644",
      "content": "Stream\n======\n\nHere I will learn about streams using interactive models.\n\nConstruct a stream\n\n    Stream = (first, rest=->emptyStream) ->\n      self =\n        first: ->\n          first\n        rest: rest\n\nGet an element from a stream at position `n`\n\n        get: (n) ->\n          if n is 0\n            self.first()\n          else\n            rest().get(n - 1)\n\nInvoke a function for each item in a stream.\n\n        each: (fn) ->\n          fn(self.first())\n          rest().each(fn)\n\n          self\n\nTransform a stream\n\n        map: (fn) ->\n          Stream(\n            fn(self.first()),\n            -> rest().map(fn)\n          )\n\nA distinguishable object representing the empty stream.\n\n    emptyStream =\n      map: ->\n        emptyStream\n      each: ->\n        emptyStream\n      get: ->\n\nExport\n\n    module.exports = Stream\n\nNotes\n-----\n\nPassing in the second argument as a function to be evaluated later is a little\ntough on the user interface. The solution may be to provide helpers or higher\nlevels of abstraction so that we don't have to mess with streams directly,\njust create them from various other sources like text, lists, ajax requests,\ngenerator functions, etc. and be able to pipe them together in a signal flow\nstyle.\n\nAnother thing to explore is promises/deferreds and using those as our piping\ninterface.\n\nThe primary use case in my mind is something like:\n\n>     ###\n>\n>     +----------+                        +-----+                    +------+                   +--------+                        +------+\n>     |FileReader| -> Character Stream -> |Lexer| -> Token Stream -> |Parser| -> Node Stream -> |Compiler| -> Character Stream -> |STDOUT|\n>     +----------+                        +-----+                    +------+                   +--------+                        +------+\n>          |                                 |                          |                           |\n>          v                                 v                          v                           v                             +------+\n>          +---------------------------------+--------------------------+---------------------------+------------------------- -> |STDERR|\n>                                                                                                                                 +------+\n>     ###\n\nWhich could be connected something like:\n\n>     reader\n>     .out(lexer)\n>     .out(parser)\n>     .out(compiler)\n>     .out(STDOUT)\n>     .err(STDERR)\n\nResources\n---------\n\nhttp://mitpress.mit.edu/sicp/full-text/sicp/book/node70.html",
      "type": "blob"
    },
    "process.coffee.md": {
      "path": "process.coffee.md",
      "mode": "100644",
      "content": "Process\n=======\n\nA process receives data from input and writes data to output.\n\nJust exploring some unix-y concepts in JS land.\n\n    STDOUT = (atom) ->\n      console.log atom\n\n    StringStreamer = (output) ->\n      (string) ->\n        string.split('').map output\n        \n    T = (output) ->\n      (atom) ->\n        console.log atom\n        output atom\n\n    Tokenizer = (output) ->\n      word = \"\"\n\n      (character) ->\n        if character.match /\\s/\n          if word\n            output\n              type: \"word\"\n              value: word\n\n            word = \"\"\n        else\n          word += character\n\n    Object.extend exports,\n      StringStreamer: StringStreamer\n      Tokenizer: Tokenizer\n      T: T\n\nExample:\n--------\n\n>     pipeline = StringStreamer T Tokenizer STDOUT\n>\n>     pipeline \"\"\"\n>       this is pretty cool\\n\n>     \"\"\"\n",
      "type": "blob"
    },
    "templates/table.haml.md": {
      "path": "templates/table.haml.md",
      "mode": "100644",
      "content": "A table template to render rows from stuff!\n\n    %table\n      %thead\n        %tr\n          - each @headers, (header) ->\n            %th= header\n      %tbody\n        - each @rows, (row) ->\n          %tr\n            - Object.keys(row).each (name) ->\n              %td= row[name]\n",
      "type": "blob"
    },
    "test/process.coffee": {
      "path": "test/process.coffee",
      "mode": "100644",
      "content": "{StringStreamer, Tokenizer, T} = require('/process')\n\ndescribe \"StringStreamer\", ->\n  it \"should convert strings into streams of characters\", ->\n    chars = []\n\n    output = (c) ->\n      assert.equal c, \"a\"\n      chars.push c\n\n    (StringStreamer output) \"aaaaaaa\"\n    \n    assert.equal chars.length, 7\n\ndescribe \"Process streams\", ->\n  \n  it \"Should output a stream of tokens\", ->\n    tokens = []\n\n    output = (token) ->\n      tokens.push token\n\n    pipeline = StringStreamer Tokenizer output\n\n    pipeline \"\"\"\n      this is pretty cool\\n\n    \"\"\"\n\n    assert.equal tokens.length, 4, \"Tokens: #{tokens.length}\"\n",
      "type": "blob"
    },
    "test/stream.coffee.md": {
      "path": "test/stream.coffee.md",
      "mode": "100644",
      "content": "    Stream = require('/main')\n\n    describe \"Stream\", ->\n      it \"should be like a list\", ->\n        stream = Stream(1)\n        \n        assert.equal 1, stream.first()\n\n      it \"should be able to have a couple items\", ->\n      \n        stream = Stream(0, ->Stream(1))\n        \n        assert.equal 0, stream.get(0), \"First item is 0\"\n        assert.equal 1, stream.get(1), \"Second item is 1\"\n\n      it \"should be able to map\", ->\n        stream = Stream(0, ->Stream(1, ->Stream(2))).map (i) -> i * i\n        \n        assert.equal 4, stream.get(2)\n\n      it \"should be enumerable by each\", ->\n        called = 0\n        \n        stream = Stream(0, ->Stream(1, ->Stream(2))).each ->\n          called += 1\n        \n        assert.equal 3, called\n\n    require \"../streamatorium\"\n",
      "type": "blob"
    },
    "streamatorium.coffee.md": {
      "path": "streamatorium.coffee.md",
      "mode": "100644",
      "content": "Streamatorium\n=============\n\nIntroduction\n------------\n\nThe Streamatorium is an experiment in applying functional programming and Unix\nprinciples to the web.\n\nProcesses may look something like these:\n\nPrint out even numbers to the console.\n\n>     100.times filter(even) STDOUT\n\nGet popular repos from a json data source and display them one at a time to the \nconsole.\n\n>     popular = (repo) -> repo.watchers > 100\n>     \n>     json(\"https://api.github.com/repos/\") each filter(popular) STDOUT\n\n\nAtoms are any object. Atoms form streams by flowing through pipes. Atoms \noriginate in sources and end up in sinks.\n\n> Example atoms\n>     0, 1, \"\", true, false, \"heyyy\", 954, {}, {name: \"flambo\"}, [{...}, ...]\n\nSinks\n-----\n\nA sink is a function that accepts an atom.\n\n`STDOUT` logs any atom to the console\n\n    STDOUT = (atom) -> console.log atom\n\nThe `NULL` sink eats any atom passed to it and does nothing\n\n    NULL = (atom) ->\n\nA source is a function that takes a sink as an argument.\n\n>     source = (sink) ->\n>       ...\n\nPipes\n-----\n\nA pipe is a function that takes a sink and returns a sink. A pipe is both a\nsource and a sink.\n\nA pipeline connects sources to sinks through pipes.\n\n>     source pipe0 pipe1 pipe2 sink\n\nThis works due to function composition: \n\n>     source(pipe0(pipe1(pipe2(sink))))\n\nPass items through to output unchanged. More useful as a demonstration than\nan actual pipe.\n\n    identity = (output) ->\n      (atom) ->\n        output atom\n\nOutput atoms asynchrounously instead of immediately.\n\n    defer = (output) ->\n      (atom) ->\n        setTimeout output, 0, atom\n\n`each` splats arrays into individual items. Non-arrays are passed through as is.\n\n    each = (output) ->\n      (arrayOrItem) ->\n        [].concat(arrayOrItem).each (item) ->\n          output item\n\nGet JSON data from input urls then pass it along.\n\n    getJSON = (output) ->\n      (url) ->\n        $.getJSON(url).then output\n\n`split` is a generalized T. When contsructed with a list of sinks it returns\na sink that outputs to all of the sinks it was constructed with.\n\n    split = (outputs...) ->\n      (atom) ->\n        outputs.forEach (output) ->\n          output atom\n\nPipe Generators\n---------------\n\nA pipe generator is a function that returns a pipe.\n\nSimilar to unix tee, splits a stream.\n\n    tee = (sink) ->\n      (output) ->\n        split sink, output\n\nExample of `tee` implemented wthout `split`\n\n>     tee = (sink) ->     # Generator\n>       (output) ->       # Pipe\n>         (atom) ->       # Sink\n>           sink atom\n>           output atom\n\n`T` is a pipe that will mirror its atoms to the console. It is useful for\ninspecting the flow at any point in the pipeline.\n\n    T = tee(STDOUT)\n\n>     source T pipe0 T pipe1 STDOUT\n\nMaps\n----\n\nGenerate a pipe that transforms atoms by applying the given transformation\nfunction to each atom as it passes through.\n\n    map = (fn) ->\n      (output) ->\n        (atom) ->\n          output fn(atom)\n\nFilters\n-------\n\nGenerate a pipe that only allows certain atoms to pass through. `filter` applies\nthe given indicator function and only passes through atoms for which it returns\ntrue.\n\n    filter = (fn) ->\n      (output) ->\n        (atom) ->\n          output atom if fn(atom)\n\nThe `soak` pipe filters out `null` and `undefined` atoms.\n\n    soak = filter (atom) -> atom?\n\nStateful Pipes\n--------------\n\n`toggle` is a switch. Whenever it receives an input it will ouput either true or\nfalse and switch its state to output the opposite value the next input it\nreceives. It doesn't matter what atom it receives.\n\n    toggle = (output) ->\n      value = true\n      (atom) ->\n        output value\n        value = !value\n\nClocks\n------\n\nEmit an atom periodically. The `clock` constructor returns a source.\n\n    clock = (t) ->\n      (output) ->\n        setInterval ->\n          output 1\n        , t * 1000\n\nControls\n--------\n\nTODO: Transistors and stuff.\n\nGates\n-----\n\nAttempt at a buffer that collects input and releases them based on a\ncontrol/signal input.\n\n`ctrl` is a source\n\n    gate = (ctrl) ->\n      (output) ->\n        buffer = []\n\n        ctrl ->\n          output buffer.shift()\n\n        (atom) ->\n          buffer.push atom\n\nExamples\n-------\n\nJSON to Template\n\n    jsonExample = ->\n      rows = Observable([])\n      headers = Observable([])\n  \n      rows.observe (newRows) ->\n        if firstRow = newRows.first()\n          headers Object.keys firstRow\n  \n      template = require('./templates/table')(\n        rows: rows\n        headers: headers\n      )\n  \n      pipeline = T getJSON T rows\n      pipeline(\"https://api.github.com/repositories\")\n      $(\"body\").append(template)\n\n    clockExample = ->\n      clock(1) STDOUT\n\n    gateExample = ->\n      25.times gate(clock(0.25)) soak defer T NULL\n\n    filterExample = ->\n      even = (x) -> x % 2 is 0\n\n      100.times filter(even) STDOUT\n\n    toggleExample = ->\n      10.times toggle STDOUT\n\n    filterExample()\n\nNotes\n-----\n\nApparently there is some mad currying going on.\n\nWhen nesting the functions avoid leaky closures:\n\n    # GOOD, can reuse the \"same\" gate in multiple streams no problem\n    gate = (ctrl) ->\n      (output) ->\n        buffer = []\n\n        ctrl ->\n          output buffer.shift()\n\n        (atom) ->\n          buffer.push atom\n    \n    # BAD, gate will get weird if used in multiple streams\n    gate = (ctrl) ->\n      buffer = []\n      \n      (output) ->\n        ctrl ->\n          output buffer.shift()\n\n        (atom) ->\n          buffer.push atom\n",
      "type": "blob"
    }
  },
  "distribution": {
    "main": {
      "path": "main",
      "content": "(function() {\n  var Stream, emptyStream;\n\n  Stream = function(first, rest) {\n    var self;\n    if (rest == null) {\n      rest = function() {\n        return emptyStream;\n      };\n    }\n    return self = {\n      first: function() {\n        return first;\n      },\n      rest: rest,\n      get: function(n) {\n        if (n === 0) {\n          return self.first();\n        } else {\n          return rest().get(n - 1);\n        }\n      },\n      each: function(fn) {\n        fn(self.first());\n        rest().each(fn);\n        return self;\n      },\n      map: function(fn) {\n        return Stream(fn(self.first()), function() {\n          return rest().map(fn);\n        });\n      }\n    };\n  };\n\n  emptyStream = {\n    map: function() {\n      return emptyStream;\n    },\n    each: function() {\n      return emptyStream;\n    },\n    get: function() {}\n  };\n\n  module.exports = Stream;\n\n}).call(this);\n",
      "type": "blob"
    },
    "process": {
      "path": "process",
      "content": "(function() {\n  var STDOUT, StringStreamer, T, Tokenizer;\n\n  STDOUT = function(atom) {\n    return console.log(atom);\n  };\n\n  StringStreamer = function(output) {\n    return function(string) {\n      return string.split('').map(output);\n    };\n  };\n\n  T = function(output) {\n    return function(atom) {\n      console.log(atom);\n      return output(atom);\n    };\n  };\n\n  Tokenizer = function(output) {\n    var word;\n    word = \"\";\n    return function(character) {\n      if (character.match(/\\s/)) {\n        if (word) {\n          output({\n            type: \"word\",\n            value: word\n          });\n          return word = \"\";\n        }\n      } else {\n        return word += character;\n      }\n    };\n  };\n\n  Object.extend(exports, {\n    StringStreamer: StringStreamer,\n    Tokenizer: Tokenizer,\n    T: T\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "templates/table": {
      "path": "templates/table",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"table\");\n    __push(__element);\n    __element = document.createElement(\"thead\");\n    __push(__element);\n    __element = document.createElement(\"tr\");\n    __push(__element);\n    __each(this.headers, function(header) {\n      __element = document.createElement(\"th\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, header);\n      __push(__element);\n      __pop();\n      return __pop();\n    });\n    __pop();\n    __pop();\n    __element = document.createElement(\"tbody\");\n    __push(__element);\n    __each(this.rows, function(row) {\n      __element = document.createElement(\"tr\");\n      __push(__element);\n      Object.keys(row).each(function(name) {\n        __element = document.createElement(\"td\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, row[name]);\n        __push(__element);\n        __pop();\n        return __pop();\n      });\n      return __pop();\n    });\n    __pop();\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "test/process": {
      "path": "test/process",
      "content": "(function() {\n  var StringStreamer, T, Tokenizer, _ref;\n\n  _ref = require('/process'), StringStreamer = _ref.StringStreamer, Tokenizer = _ref.Tokenizer, T = _ref.T;\n\n  describe(\"StringStreamer\", function() {\n    return it(\"should convert strings into streams of characters\", function() {\n      var chars, output;\n      chars = [];\n      output = function(c) {\n        assert.equal(c, \"a\");\n        return chars.push(c);\n      };\n      (StringStreamer(output))(\"aaaaaaa\");\n      return assert.equal(chars.length, 7);\n    });\n  });\n\n  describe(\"Process streams\", function() {\n    return it(\"Should output a stream of tokens\", function() {\n      var output, pipeline, tokens;\n      tokens = [];\n      output = function(token) {\n        return tokens.push(token);\n      };\n      pipeline = StringStreamer(Tokenizer(output));\n      pipeline(\"this is pretty cool\\n\");\n      return assert.equal(tokens.length, 4, \"Tokens: \" + tokens.length);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/stream": {
      "path": "test/stream",
      "content": "(function() {\n  var Stream;\n\n  Stream = require('/main');\n\n  describe(\"Stream\", function() {\n    it(\"should be like a list\", function() {\n      var stream;\n      stream = Stream(1);\n      return assert.equal(1, stream.first());\n    });\n    it(\"should be able to have a couple items\", function() {\n      var stream;\n      stream = Stream(0, function() {\n        return Stream(1);\n      });\n      assert.equal(0, stream.get(0), \"First item is 0\");\n      return assert.equal(1, stream.get(1), \"Second item is 1\");\n    });\n    it(\"should be able to map\", function() {\n      var stream;\n      stream = Stream(0, function() {\n        return Stream(1, function() {\n          return Stream(2);\n        });\n      }).map(function(i) {\n        return i * i;\n      });\n      return assert.equal(4, stream.get(2));\n    });\n    return it(\"should be enumerable by each\", function() {\n      var called, stream;\n      called = 0;\n      stream = Stream(0, function() {\n        return Stream(1, function() {\n          return Stream(2);\n        });\n      }).each(function() {\n        return called += 1;\n      });\n      return assert.equal(3, called);\n    });\n  });\n\n  require(\"../streamatorium\");\n\n}).call(this);\n",
      "type": "blob"
    },
    "streamatorium": {
      "path": "streamatorium",
      "content": "(function() {\n  var NULL, STDOUT, T, clock, clockExample, defer, each, filter, filterExample, gate, gateExample, getJSON, identity, jsonExample, map, soak, split, tee, toggle, toggleExample,\n    __slice = [].slice;\n\n  STDOUT = function(atom) {\n    return console.log(atom);\n  };\n\n  NULL = function(atom) {};\n\n  identity = function(output) {\n    return function(atom) {\n      return output(atom);\n    };\n  };\n\n  defer = function(output) {\n    return function(atom) {\n      return setTimeout(output, 0, atom);\n    };\n  };\n\n  each = function(output) {\n    return function(arrayOrItem) {\n      return [].concat(arrayOrItem).each(function(item) {\n        return output(item);\n      });\n    };\n  };\n\n  getJSON = function(output) {\n    return function(url) {\n      return $.getJSON(url).then(output);\n    };\n  };\n\n  split = function() {\n    var outputs;\n    outputs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    return function(atom) {\n      return outputs.forEach(function(output) {\n        return output(atom);\n      });\n    };\n  };\n\n  tee = function(sink) {\n    return function(output) {\n      return split(sink, output);\n    };\n  };\n\n  T = tee(STDOUT);\n\n  map = function(fn) {\n    return function(output) {\n      return function(atom) {\n        return output(fn(atom));\n      };\n    };\n  };\n\n  filter = function(fn) {\n    return function(output) {\n      return function(atom) {\n        if (fn(atom)) {\n          return output(atom);\n        }\n      };\n    };\n  };\n\n  soak = filter(function(atom) {\n    return atom != null;\n  });\n\n  toggle = function(output) {\n    var value;\n    value = true;\n    return function(atom) {\n      output(value);\n      return value = !value;\n    };\n  };\n\n  clock = function(t) {\n    return function(output) {\n      return setInterval(function() {\n        return output(1);\n      }, t * 1000);\n    };\n  };\n\n  gate = function(ctrl) {\n    return function(output) {\n      var buffer;\n      buffer = [];\n      ctrl(function() {\n        return output(buffer.shift());\n      });\n      return function(atom) {\n        return buffer.push(atom);\n      };\n    };\n  };\n\n  jsonExample = function() {\n    var headers, pipeline, rows, template;\n    rows = Observable([]);\n    headers = Observable([]);\n    rows.observe(function(newRows) {\n      var firstRow;\n      if (firstRow = newRows.first()) {\n        return headers(Object.keys(firstRow));\n      }\n    });\n    template = require('./templates/table')({\n      rows: rows,\n      headers: headers\n    });\n    pipeline = T(getJSON(T(rows)));\n    pipeline(\"https://api.github.com/repositories\");\n    return $(\"body\").append(template);\n  };\n\n  clockExample = function() {\n    return clock(1)(STDOUT);\n  };\n\n  gateExample = function() {\n    return 25..times(gate(clock(0.25))(soak(defer(T(NULL)))));\n  };\n\n  filterExample = function() {\n    var even;\n    even = function(x) {\n      return x % 2 === 0;\n    };\n    return 100..times(filter(even)(STDOUT));\n  };\n\n  toggleExample = function() {\n    return 10..times(toggle(STDOUT));\n  };\n\n  filterExample();\n\n  gate = function(ctrl) {\n    return function(output) {\n      var buffer;\n      buffer = [];\n      ctrl(function() {\n        return output(buffer.shift());\n      });\n      return function(atom) {\n        return buffer.push(atom);\n      };\n    };\n  };\n\n  gate = function(ctrl) {\n    var buffer;\n    buffer = [];\n    return function(output) {\n      ctrl(function() {\n        return output(buffer.shift());\n      });\n      return function(atom) {\n        return buffer.push(atom);\n      };\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    }
  },
  "entryPoint": "main",
  "dependencies": {},
  "repository": {
    "id": 12873038,
    "name": "stream",
    "full_name": "STRd6/stream",
    "owner": {
      "login": "STRd6",
      "id": 18894,
      "avatar_url": "https://2.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
      "gravatar_id": "33117162fff8a9cf50544a604f60c045",
      "url": "https://api.github.com/users/STRd6",
      "html_url": "https://github.com/STRd6",
      "followers_url": "https://api.github.com/users/STRd6/followers",
      "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
      "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
      "organizations_url": "https://api.github.com/users/STRd6/orgs",
      "repos_url": "https://api.github.com/users/STRd6/repos",
      "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/STRd6/received_events",
      "type": "User"
    },
    "private": false,
    "html_url": "https://github.com/STRd6/stream",
    "description": "Learning about streams",
    "fork": false,
    "url": "https://api.github.com/repos/STRd6/stream",
    "forks_url": "https://api.github.com/repos/STRd6/stream/forks",
    "keys_url": "https://api.github.com/repos/STRd6/stream/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/STRd6/stream/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/STRd6/stream/teams",
    "hooks_url": "https://api.github.com/repos/STRd6/stream/hooks",
    "issue_events_url": "https://api.github.com/repos/STRd6/stream/issues/events{/number}",
    "events_url": "https://api.github.com/repos/STRd6/stream/events",
    "assignees_url": "https://api.github.com/repos/STRd6/stream/assignees{/user}",
    "branches_url": "https://api.github.com/repos/STRd6/stream/branches{/branch}",
    "tags_url": "https://api.github.com/repos/STRd6/stream/tags",
    "blobs_url": "https://api.github.com/repos/STRd6/stream/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/STRd6/stream/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/STRd6/stream/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/STRd6/stream/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/STRd6/stream/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/STRd6/stream/languages",
    "stargazers_url": "https://api.github.com/repos/STRd6/stream/stargazers",
    "contributors_url": "https://api.github.com/repos/STRd6/stream/contributors",
    "subscribers_url": "https://api.github.com/repos/STRd6/stream/subscribers",
    "subscription_url": "https://api.github.com/repos/STRd6/stream/subscription",
    "commits_url": "https://api.github.com/repos/STRd6/stream/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/STRd6/stream/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/STRd6/stream/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/STRd6/stream/issues/comments/{number}",
    "contents_url": "https://api.github.com/repos/STRd6/stream/contents/{+path}",
    "compare_url": "https://api.github.com/repos/STRd6/stream/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/STRd6/stream/merges",
    "archive_url": "https://api.github.com/repos/STRd6/stream/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/STRd6/stream/downloads",
    "issues_url": "https://api.github.com/repos/STRd6/stream/issues{/number}",
    "pulls_url": "https://api.github.com/repos/STRd6/stream/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/STRd6/stream/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/STRd6/stream/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/STRd6/stream/labels{/name}",
    "created_at": "2013-09-16T17:03:24Z",
    "updated_at": "2013-09-19T00:58:16Z",
    "pushed_at": "2013-09-19T00:58:15Z",
    "git_url": "git://github.com/STRd6/stream.git",
    "ssh_url": "git@github.com:STRd6/stream.git",
    "clone_url": "https://github.com/STRd6/stream.git",
    "svn_url": "https://github.com/STRd6/stream",
    "homepage": null,
    "size": 1212,
    "watchers_count": 0,
    "language": "CoffeeScript",
    "has_issues": true,
    "has_downloads": true,
    "has_wiki": true,
    "forks_count": 0,
    "mirror_url": null,
    "open_issues_count": 0,
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "master_branch": "master",
    "default_branch": "master",
    "permissions": {
      "admin": true,
      "push": true,
      "pull": true
    },
    "network_count": 0,
    "branch": "master",
    "defaultBranch": "master",
    "includedModules": [
      "Bindable"
    ]
  },
  "progenitor": {
    "url": "http://strd6.github.io/editor/"
  }
}